#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef char *String;
typedef struct lnode{
  String data;
  struct lnode *next;
}*List;
 
int list_isempty(List l)
{
    /* `l'が空リストなら0以外を、そうでないなら0を返す。 */

  if (l == NULL)
    return 3;
  else
    return 0;
    
}
 
List list_cons(String s, List l)
{
    /*
     * リスト`l'の先頭に文字列`s'を要素として追加したリストを返す。
     * 必要なメモリはmallocやcallocで確保する。
     */
   List p;
   if ((p = (struct lnode *)malloc(sizeof(struct lnode))) == NULL) {
    printf("malloc error\n");
    exit(EXIT_FAILURE);
  }
  strcpy(p->data, s);
  p->next = l;
  l = p;
  return l;
  
}
 
void list_free(List l)
{
    List s;
    /*
     * リスト`l'の使用しているメモリを全て解放する。
     * この関数を呼び出して以降、`l'を使用してはいけない。
     */
    while (! list_isempty(l)) {
      s = s->next;
      free(l);
      l = s;
    }
}
 
void list_putl(List l)
{
    while (! list_isempty(l)) {
        printf("%s\n", l->data);
        l = l->next;
    }
}
 
int main(int argc, char *argv[])
{
    List l;
 
    /* 変数lに空リストを代入。 */
    l = NULL;
 
    /*
     * 以下の操作をEOFまで繰り返す。
     * ・文字列を読み込む。
     * ・その文字列をlist_consでリストの先頭に追加して、lを更新する。
     */
    String s = (char *)malloc(100);
    scanf("%s", s);
    while (*s != EOF){
      list_cons(s, l);
      scanf("%s", s);
    }
    free(s);
 
    list_putl(l);
 
    list_free(l);
 
    return 0;
}
